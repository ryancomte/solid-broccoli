{"version":3,"sources":["utils/mutations.js","utils/queries.js","utils/auth.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","QUERY_ME","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","saveBookIds","bookIdArr","length","JSON","stringify","removeBookId","bookId","savedBookIds","parse","updatedSavedBookIds","filter","savedBookId","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","update","cache","saveBook","data","me","readQuery","query","writeQuery","savedBooks","e","console","error","useEffect","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","handleSaveBook","bookInput","find","Auth","loggedIn","variables","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","SavedBooks","useQuery","loading","userData","removeBook","handleDeleteBook","SignupForm","username","email","password","userFormData","setUserFormData","addUser","validated","showAlert","setShowAlert","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aef1cc7d.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\n  mutation saveBook($bookInput: bookInput!) {\n    saveBook(input: $bookInput) {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        bookId\n        _id\n        authors\n        description\n        title\n        image\n        link\n      }\n    }\n  }\n`;\n\nexport const REMOVE_BOOK = gql`\n  mutation removeBook($bookId: ID!) {\n    removeBook(id: $bookId) {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        bookId\n        _id\n        authors\n        description\n        title\n        image\n        link\n      }\n    }\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const QUERY_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        _id\n        bookId\n        authors\n        description\n        title\n        image\n        link\n      }\n    }\n  }\n`;\n","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/react-hooks';\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { QUERY_ME } from '../utils/queries';\n\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, { error }] = useMutation(SAVE_BOOK, {\n    update(cache, { data: { saveBook } }) {\n      try {\n        const { me } = cache.readQuery({ query: QUERY_ME });\n        cache.writeQuery({\n          query: QUERY_ME,\n          data: { me: { ...me, savedBooks: [...me.savedBooks, saveBook] } },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    },\n  });\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookInput = searchedBooks.find((book) => book.bookId === bookId);\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await saveBook({\n        variables: { bookInput },\n      });\n\n      setSavedBookIds([...savedBookIds, bookInput.bookId]);\n      saveBookIds(savedBookIds);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import React, { useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { QUERY_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\n\nconst SavedBooks = () => {\n  const { loading, data: userData } = useQuery(QUERY_ME);\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK, {\n    update(cache, { data: { removeBook } }) {\n      try {\n        const { me } = cache.readQuery({ query: QUERY_ME });\n        cache.writeQuery({\n          query: QUERY_ME,\n          data: { me: removeBook },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    },\n  });\n  const loggedIn = Auth.loggedIn();\n  const savedBooks = userData?.me.savedBooks || [];\n\n  // use this to determine if `useEffect()` hook needs to run again\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await removeBook({\n        variables: { bookId },\n      });\n\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {loggedIn && savedBooks.length\n            ? `Viewing ${savedBooks.length} saved ${\n                savedBooks.length === 1 ? 'book' : 'books'\n              }`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {loggedIn && savedBooks.length ? (\n            <>\n              {savedBooks.map((book) => {\n                return (\n                  <Card key={book.bookId} border=\"dark\">\n                    {book.image ? (\n                      <Card.Img\n                        src={book.image}\n                        alt={`The cover for ${book.title}`}\n                        variant=\"top\"\n                      />\n                    ) : null}\n                    <Card.Body>\n                      <Card.Title>{book.title}</Card.Title>\n                      <p className=\"small\">Authors: {book.authors}</p>\n                      <Card.Text>{book.description}</Card.Text>\n                      <Button\n                        className=\"btn-block btn-danger\"\n                        onClick={() => handleDeleteBook(book.bookId)}\n                      >\n                        Delete this Book!\n                      </Button>\n                    </Card.Body>\n                  </Card>\n                );\n              })}\n            </>\n          ) : null}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n// import { createUser } from '../utils/API';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n  });\n  const [addUser, { error }] = useMutation(ADD_USER);\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    event.preventDefault();\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/react-hooks';\nimport { LOGIN_USER } from '../utils/mutations';\n\n// import { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token');\n\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n  uri: '/graphql',\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={SearchBooks} />\n            <Route exact path=\"/saved\" component={SavedBooks} />\n            <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}